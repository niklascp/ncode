<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nCode</name>
    </assembly>
    <members>
        <member name="T:nCode.Controllers.SearchController">
            <summary>
            Controller API for Job Scheduling.
            </summary>
        </member>
        <member name="M:nCode.Controllers.SearchController.Reindex(System.Guid)">
            <summary>
            Gets a list of Planned and Completed Job Executions.
            </summary>
        </member>
        <member name="T:nCode.Controllers.JobSchedulingController">
            <summary>
            Controller API for Job Scheduling.
            </summary>
        </member>
        <member name="M:nCode.Controllers.JobSchedulingController.GetJobExecutions(System.Int32,System.Int32)">
            <summary>
            Gets a list of Planned and Completed Job Executions.
            </summary>
        </member>
        <member name="M:nCode.Controllers.JobSchedulingController.GetScheduledJobs">
            <summary>
            Get a list of Scheduled Jobs.
            </summary>
        </member>
        <member name="M:nCode.Controllers.JobSchedulingController.DeleteJob(System.String)">
            <summary>
            Get a list of Scheduled Jobs.
            </summary>
        </member>
        <member name="T:nCode.JobScheduling.Hangfire.HangfireJobEngine">
            <summary>
            Represent a Job Engine implementation using the Hangfire Job Framework.
            </summary>
        </member>
        <member name="T:nCode.JobScheduling.JobEngine">
            <summary>
            Represents the Interface for a Job Engine.
            </summary>
        </member>
        <member name="M:nCode.JobScheduling.JobEngine.Queue``1(System.String)">
            <summary>
            Enqueue a background job to run immidiately on any worker node.
            </summary>
            <typeparam name="T">The Type og the Background Job.</typeparam>
            <returns>A job id that identifies the job enqueued.</returns>
        </member>
        <member name="M:nCode.JobScheduling.JobEngine.Delete(System.String)">
            <summary>
            Deletes the job given by the job id.
            </summary>
        </member>
        <member name="M:nCode.JobScheduling.JobEngine.GetScheduledJobs">
            <summary>
            Gets a list of Scheduled Jobs.
            </summary>
        </member>
        <member name="M:nCode.JobScheduling.JobEngine.GetJobExecutions(System.Int32,System.Int32)">
            <summary>
            Gets a list of planned and completed Job Executions.
            </summary>
        </member>
        <member name="M:nCode.JobScheduling.Hangfire.HangfireJobEngine.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new Hangfire Job Engine.
            </summary>
            <param name="useServer"></param>
            <param name="queues"></param>
        </member>
        <member name="T:nCode.JobScheduling.Hangfire.JobSchedulingIntegrationAttribute">
            <summary>
            This filter is used for the Integration between the nCode Job Scheduling Framework,
            and the Hangfire JobEngine implementation (<see cref="T:nCode.JobScheduling.Hangfire.HangfireJobEngine"/>).
            
            The filter is automatically added to the Global Filters collection <see cref="!:Hangfire.GlobalJobFilters"/>
            when the Hangfire Job Engine is initialized.
            </summary>
        </member>
        <member name="M:nCode.JobScheduling.Hangfire.JobSchedulingIntegrationAttribute.OnCreating(Hangfire.Client.CreatingContext)">
            <summary>
            Called before the creation of the job.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="M:nCode.JobScheduling.Hangfire.JobSchedulingIntegrationAttribute.OnCreated(Hangfire.Client.CreatedContext)">
            <summary>
            Called after the creation of the job.
            </summary>
            <param name="filterContext">The filter context.</param>
        </member>
        <member name="T:nCode.JobScheduling.JobExecution">
            <summary>
            Represents data about a Job Execution.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.JobExecution.JobId">
            <summary>
            Gets or set a unique identifier of the job execution.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.JobExecution.JobName">
            <summary>
            Gets or set the job name of the job execution.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.JobExecution.CreateDateTime">
            <summary>
            Gets or set the timestamp for the creation of the job execution.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.JobExecution.StartDateTime">
            <summary>
            Gets or set the timestamp for the creation of the job execution, if it has started.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.JobExecution.TypeName">
            <summary>
            Gets or set the assembly qualified type name of the job execution.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.JobExecution.State">
            <summary>
            Gets or set the type name of the job.
            </summary>
        </member>
        <member name="T:nCode.JobScheduling.ScheduledJob">
            <summary>
            Represents a Scheduled Recurring Job.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.ScheduledJob.JobId">
            <summary>
            Gets or set a unique identifier of the job.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.ScheduledJob.TypeName">
            <summary>
            Gets or set the type name of the job.
            </summary>
        </member>
        <member name="P:nCode.JobScheduling.ScheduledJob.CronExpression">
            <summary>
            Gets or set the Cron-expression that represents the schedule of the job.
            </summary>
        </member>
        <member name="T:nCode.Logging.Log4Net.Log4NetCleanupJob">
            <summary>
            A Background Job that Deletes old log files
            </summary>
        </member>
        <member name="T:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter">
            <summary>
            Concrete subclass of ILoggerFactoryAdapter specific to log4net 1.2.10.
            </summary>
            <remarks>
            The following configuration property values may be configured:
            <list type="bullet">
                <item><c>configType</c>: <c>INLINE|FILE|FILE-WATCH|EXTERNAL</c></item>
                <item><c>configFile</c>: log4net configuration file path in case of FILE or FILE-WATCH</item>
            </list>
            The configType values have the following implications:
            <list type="bullet">
                <item>INLINE: simply calls <c>XmlConfigurator.Configure()</c></item>
                <item>FILE: calls <c>XmlConfigurator.Configure(System.IO.FileInfo)</c> using <c>configFile</c>.</item>
                <item>FILE-WATCH: calls <c>XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)</c> using <c>configFile</c>.</item>
                <item>EXTERNAL: does nothing and expects log4net to be configured elsewhere.</item>
                <item>&lt;any&gt;: calls <c>BasicConfigurator.Configure()</c></item>
            </list>
            </remarks>
            <example>
            The following snippet shows an example of how to configure log4net logging with Common.Logging:
            <code>
            &lt;configuration&gt;
              &lt;configSections&gt;
                &lt;sectionGroup name=&quot;common&quot;&gt;
                  &lt;section name=&quot;logging&quot;
                           type=&quot;Common.Logging.ConfigurationSectionHandler, Common.Logging&quot;
                           requirePermission=&quot;false&quot; /&gt;
                &lt;/sectionGroup&gt;
                &lt;section name=&quot;log4net&quot;
                         type=&quot;log4net.Config.Log4NetConfigurationSectionHandler&quot;
                         requirePermission=&quot;false&quot; /&gt;
              &lt;/configSections&gt;
            
              &lt;common&gt;
                &lt;logging&gt;
                  &lt;factoryAdapter type=&quot;Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net&quot;&gt;
                    &lt;arg key=&quot;level&quot; value=&quot;ALL&quot; /&gt;
                    &lt;arg key=&quot;configType&quot; value=&quot;INLINE&quot; /&gt;
                  &lt;/factoryAdapter&gt;
                &lt;/logging&gt;
              &lt;/common&gt;
            
              &lt;log4net debug=&quot;false&quot;&gt;
            
                &lt;appender name=&quot;RollingLogFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender, log4net&quot;&gt;
                  &lt;param name=&quot;File&quot; value=&quot;./Web.log&quot; /&gt;
                  &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt;
                  &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;1&quot; /&gt;
                  &lt;param name=&quot;MaximumFileSize&quot; value=&quot;1GB&quot; /&gt;
                  &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt;
                  &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt;
            
                  &lt;layout type=&quot;log4net.Layout.PatternLayout, log4net&quot;&gt;
                    &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d [%t] %-5p %c - %m%n&quot; /&gt;
                  &lt;/layout&gt;
            
                &lt;/appender&gt;
            
                &lt;appender name=&quot;TraceAppender&quot; type=&quot;log4net.Appender.TraceAppender&quot;&gt;
                  &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;
                    &lt;param name=&quot;ConversionPattern&quot; value=&quot;%-5p: %m&quot; /&gt;
                  &lt;/layout&gt;
                &lt;/appender&gt;
            
                &lt;root&gt;
                  &lt;level value=&quot;ALL&quot; /&gt;
                  &lt;appender-ref ref=&quot;TraceAppender&quot; /&gt;
                  &lt;appender-ref ref=&quot;RollingLogFileAppender&quot; /&gt;
                &lt;/root&gt;
            
              &lt;/log4net&gt;
            &lt;/configuration&gt;
            </code>
            </example>
            <author>Gilles Bayon</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(Common.Logging.Configuration.NameValueCollection)">
            <summary>
            Constructor
            </summary>
            <param name="properties">configuration properties, see <see cref="T:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter"/> for more.</param>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(Common.Logging.Configuration.NameValueCollection,nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime)">
            <summary>
            Constructor accepting configuration properties and an arbitrary 
            <see cref="T:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime"/> instance.
            </summary>
            <param name="properties">configuration properties, see <see cref="T:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter"/> for more.</param>
            <param name="runtime">a log4net runtime adapter</param>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.CreateLogger(System.String)">
            <summary>
            Create a ILog instance by name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime">
            <summary>
            Abstract interface to the underlying log4net runtime
            </summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure">
            <summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure"/></summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure(System.String)">
            <summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)"/></summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigureAndWatch(System.String)">
            <summary>Calls <see cref="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)"/></summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.BasicConfiguratorConfigure">
            <summary>Calls <see cref="M:log4net.Config.BasicConfigurator.Configure"/></summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.GetLogger(System.String)">
            <summary>Calls <see cref="M:Common.Logging.LogManager.GetLogger(System.String)"/></summary>
        </member>
        <member name="T:nCode.Logging.Log4Net.Log4NetLogger">
            <summary>
            Concrete implementation of <see cref="T:Common.Logging.ILog"/> interface specific to log4net 1.2.10.
            </summary>
            <remarks>
            Log4net is capable of outputting extended debug information about where the current 
            message was generated: class name, method name, file, line, etc. Log4net assumes that the location
            information should be gathered relative to where Debug() was called. 
            When using Common.Logging, Debug() is called in Common.Logging.Log4Net.Log4NetLogger. This means that
            the location information will indicate that Common.Logging.Log4Net.Log4NetLogger always made
            the call to Debug(). We need to know where Common.Logging.ILog.Debug()
            was called. To do this we need to use the log4net.ILog.Logger.Log method and pass in a Type telling
            log4net where in the stack to begin looking for location information.
            </remarks>
            <author>Gilles Bayon</author>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLogger.#ctor(log4net.Core.ILoggerWrapper)">
            <summary>
            Constructor
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
            Sends the message to the underlying log4net system.
            </summary>
            <param name="logLevel">the level of this log event.</param>
            <param name="message">the message to log</param>
            <param name="exception">the exception to log (may be null)</param>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLogger.GetLevel(Common.Logging.LogLevel)">
            <summary>
            Maps <see cref="T:Common.Logging.LogLevel"/> to log4net's <see cref="T:log4net.Core.Level"/>
            </summary>
            <param name="logLevel"></param>
        </member>
        <member name="P:nCode.Logging.Log4Net.Log4NetLogger.IsTraceEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
        </member>
        <member name="P:nCode.Logging.Log4Net.Log4NetLogger.IsDebugEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
        </member>
        <member name="P:nCode.Logging.Log4Net.Log4NetLogger.IsInfoEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
        </member>
        <member name="P:nCode.Logging.Log4Net.Log4NetLogger.IsWarnEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
        </member>
        <member name="P:nCode.Logging.Log4Net.Log4NetLogger.IsErrorEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
        </member>
        <member name="P:nCode.Logging.Log4Net.Log4NetLogger.IsFatalEnabled">
            <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
        </member>
        <member name="T:nCode.Logging.Log4Net.CommonLoggingAppender">
            <summary>
            Routes log events to Common.Logging infrastructure.
            </summary>
            <example>
            To route all events logged using log4net to Common.Logging, you need to configure this appender as shown below:
            <code>
            &lt;log4net&gt;
                &lt;appender name=&quot;CommonLoggingAppender&quot; 
                          type=&quot;Common.Logging.Log4Net.CommonLoggingAppender, Common.Logging.Log4Net&quot;&gt;
                    &lt;layout type=&quot;log4net.Layout.PatternLayout, log4net&quot;&gt;
                        &lt;param name=&quot;ConversionPattern&quot; value=&quot;%level - %class.%method: %message&quot; /&gt;
                    &lt;/layout&gt;
                &lt;/appender&gt;
            
                &lt;root&gt;
                    &lt;level value=&quot;ALL&quot; /&gt;
                    &lt;appender-ref ref=&quot;CommonLoggingAppender&quot; /&gt;
                &lt;/root&gt;
            &lt;/log4net&gt;
            </code>
            </example>
            <author>Erich Eichinger</author>
        </member>
        <member name="M:nCode.Logging.Log4Net.CommonLoggingAppender.GetClosestLevel(log4net.Core.Level)">
            <summary>
            Gets the closest level supported by Common.Logging of the given log4net level
            </summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.CommonLoggingAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Sends the given log event to Common.Logging
            </summary>
        </member>
        <member name="P:nCode.Logging.Log4Net.CommonLoggingAppender.Layout">
            <summary>
             Get or set the layout for this appender
            </summary>
        </member>
        <member name="T:nCode.Logging.Log4Net.CommonLoggingAppender.ExceptionAwareLayout">
            <summary>
            Wrapper class that prevents exceptions from being rendered in the message
            </summary>
        </member>
        <member name="T:nCode.Search.ReindexSourceJob">
            <summary>
            A Background Job that Reindexes a single search source, specified by the source id.
            </summary>
        </member>
        <member name="T:nCode.Search.ReindexSourceJobParameters">
            <summary>
            Background Job Parameters for Reindex Source Jobs.
            </summary>
        </member>
        <member name="T:nCode.SetupMiddleware">
            <summary>
            Middleware for System Setup.
            </summary>
        </member>
        <member name="M:nCode.SetupMiddleware.#ctor(Microsoft.Owin.OwinMiddleware)">
            <summary>
            Creates a SetupMiddleware
            </summary>
        </member>
        <member name="M:nCode.SetupMiddleware.Invoke(Microsoft.Owin.IOwinContext)">
            <summary>
            Invokes SetupMiddleware
            </summary>
        </member>
        <member name="T:nCode.Startup">
            <summary>
            Main startup class for OWIN.
            </summary>
        </member>
        <member name="T:nCode.CultureRouteContraint">
            <summary>
            Checkes the Culture and the StaticPath parameter, and returns true if a corresponding content page exists.
            </summary>
        </member>
        <member name="M:nCode.CultureRouteContraint.Match(System.Web.HttpContextBase,System.Web.Routing.Route,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteDirection)">
            <summary>
            Checkes the Culture and the Path parameter, and returns true if a corresponding Web Forms page exists.
            </summary>
        </member>
        <member name="T:nCode.Data.CascadeRule">
            <summary>
            Instructs the Schema Update to use the specified Cascade Rule on a Foreign Key Attribute.
            </summary>
        </member>
        <member name="M:nCode.Data.CascadeRule.#ctor(System.Boolean)">
            <summary>
            Creates a new Cascade Rule Attribute.
            </summary>
        </member>
        <member name="T:nCode.Data.DbConfigurationExtensions">
            <summary>
            Contains custom extensions for the Entity Framework.
            </summary>
        </member>
        <member name="M:nCode.Data.DbConfigurationExtensions.UpdateWithLog(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
            <summary>
            Updates a DbMigrationsConfiguration to its latest migrating, logging the process.
            </summary>
        </member>
        <member name="T:nCode.Data.IFileImportManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:nCode.Data.ForeignEntityAtrribute">
            <summary>
            Instructs the Schema Update that the given table should not be maintained by this context.
            </summary>
        </member>
        <member name="M:nCode.Data.ForeignEntityAtrribute.#ctor">
            <summary>
            Creates a new Foreign Entity Attribute.
            </summary>
        </member>
        <member name="T:nCode.Data.RenameAttribute">
            <summary>
            Instructs the Schema Update that the given columns should be indexed.
            </summary>
        </member>
        <member name="M:nCode.Data.RenameAttribute.#ctor(System.String)">
            <summary>
            Creates a new Index Attribute that represent an index on the specified property names.
            </summary>
        </member>
        <member name="P:nCode.Data.RenameAttribute.OldName">
            <summary>
            Gets the names of the properties that this index is defined on.
            </summary>
        </member>
        <member name="T:nCode.Data.PrimaryKey">
            <summary>
            REpresents a Primary Key.
            </summary>
        </member>
        <member name="T:nCode.Data.UniqueKeyAttribute">
            <summary>
            Instructs the Schema Update that the given columns should be indexed.
            </summary>
        </member>
        <member name="M:nCode.Data.UniqueKeyAttribute.#ctor(System.String[])">
            <summary>
            Creates a new Index Attribute that represent an index on the specified property names.
            </summary>
        </member>
        <member name="P:nCode.Data.UniqueKeyAttribute.Name">
            <summary>
            Gets or sets the name of the index, or null if de default name should be used.
            </summary>
        </member>
        <member name="P:nCode.Data.UniqueKeyAttribute.Columns">
            <summary>
            Gets the names of the properties that this index is defined on.
            </summary>
        </member>
        <member name="T:nCode.Data.IndexAttribute">
            <summary>
            Instructs the Schema Update that the given columns should be indexed.
            </summary>
        </member>
        <member name="M:nCode.Data.IndexAttribute.#ctor(System.String[])">
            <summary>
            Creates a new Index Attribute that represent an index on the specified property names.
            </summary>
        </member>
        <member name="P:nCode.Data.IndexAttribute.Name">
            <summary>
            Gets or sets the name of the index, or null if de default name should be used.
            </summary>
        </member>
        <member name="P:nCode.Data.IndexAttribute.Columns">
            <summary>
            Gets the names of the properties that this index is defined on.
            </summary>
        </member>
        <member name="T:nCode.Geographics.GsApi.GsApi">
            <summary>
            API for the Danish Geographical Data Service: "Geo Servicen".
            </summary>
        </member>
        <member name="M:nCode.Geographics.GsApi.GsApi.LookupAddress(nCode.Geographics.StreetAddress,System.String)">
            <summary>
            Lookups Geographical Data for the given Street Address in the postal area given by the Postal Code.
            </summary>
        </member>
        <member name="M:nCode.Geographics.GsApi.GsApi.SearchAddress(nCode.Geographics.StreetAddress,System.Boolean)">
            <summary>
            Searching for Geographical Data for the given Street Address in all postal areas. Optoannly just searches for the street name, thus
            ignoring the house number.
            </summary>
        </member>
        <member name="M:nCode.Imaging.CompressImageExtension.CompressImage(System.Drawing.Image,System.Int32)">
            <summary>
            Compresses a image using JPEG.
            </summary>
        </member>
        <member name="M:nCode.Imaging.GrayscaleImageExtension.GrayscaleImage(System.Drawing.Image)">
            <summary>
            Grayscales a image.
            </summary>
        </member>
        <member name="M:nCode.Imaging.RotateImageExtension.RotateImage(System.Drawing.Image,System.Int32,System.Drawing.Color)">
            <summary>
            Rotates a image using the given rotation angle (in degrees).
            </summary>
        </member>
        <member name="M:nCode.Imaging.RoundCornersExtention.RoundCorners(System.Drawing.Image,System.Int32,System.Drawing.Color)">
            <summary>
            Returns and image with rounded corners.
            </summary>
        </member>
        <member name="T:nCode.Logging.Log4Net.Log4NetLoggingEngine">
            <summary>
            Implements a Logging Engine that useslog4net.
            </summary>
        </member>
        <member name="M:nCode.Logging.LoggingEngine.Info(System.String,System.Exception)">
            <summary>
            Writes a Infomation Log Message.
            </summary>
        </member>
        <member name="M:nCode.Logging.LoggingEngine.Warn(System.String,System.Exception)">
            <summary>
            Writes a Warning Log Message.
            </summary>
        </member>
        <member name="M:nCode.Logging.LoggingEngine.Error(System.String,System.Exception)">
            <summary>
            Writes a Error Log Message.
            </summary>
        </member>
        <member name="M:nCode.Logging.LoggingEngine.Verbose(System.String,System.Exception)">
            <summary>
            Writes a Verbose Log Message.
            </summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggingEngine.#ctor">
            <summary>
            Initializes Logging.
            </summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggingEngine.Info(System.String,System.Exception)">
            <summary>
            Writes a Infomation Log Message.
            </summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggingEngine.Warn(System.String,System.Exception)">
            <summary>
            Writes a Warning Log Message.
            </summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggingEngine.Error(System.String,System.Exception)">
            <summary>
            Writes a Error Log Message.
            </summary>
        </member>
        <member name="M:nCode.Logging.Log4Net.Log4NetLoggingEngine.Verbose(System.String,System.Exception)">
            <summary>
            Writes a Infomation Log Message.
            </summary>
        </member>
        <member name="T:nCode.Metadata.SiteMetadataContext">
            <summary>
            Class for storing Site-wise Metadata.
            </summary>
        </member>
        <member name="T:nCode.Metadata.IMetadataContext">
            <summary>
            Interface for Metadata Contexts
            </summary>
        </member>
        <member name="M:nCode.Metadata.IMetadataContext.GetProperty``1(System.String,``0)">
            <summary>
            Gets the Metadata Property given by the given key, or a default value if the Property is not defined.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:nCode.Metadata.IMetadataContext.SetProperty``1(System.String,``0)">
            <summary>
            Sets the Metadata Property given by the given key to the given value.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:nCode.Metadata.SiteMetadataContext.GetProperty``1(System.String,``0)">
            <summary>
            Gets the given property from the database.
            </summary>
        </member>
        <member name="M:nCode.Metadata.SiteMetadataContext.SetProperty``1(System.String,``0)">
            <summary>
            Sets the given property in the database.
            </summary>
        </member>
        <member name="P:nCode.Metadata.SiteMetadataContext.ObjectTypeId">
            <summary>
            Gets the Object Type Id for Site Metadata.
            </summary>
        </member>
        <member name="P:nCode.Metadata.SiteMetadataContext.Instance">
            <summary>
            Gets a singleton instance of this class.
            </summary>
        </member>
        <member name="T:nCode.Search.IIndexUpdateContext">
            <summary>
            Represents an Index Update Context.
            </summary>
        </member>
        <member name="M:nCode.Search.IIndexUpdateContext.FlushIndex">
            <summary>
            Deletes all enties in this index.
            </summary>
            <param name="entryId"></param>
        </member>
        <member name="M:nCode.Search.IIndexUpdateContext.DeleteEntry(System.Guid)">
            <summary>
            Deletes occuerences of the given entry.
            </summary>
            <param name="entryId"></param>
        </member>
        <member name="M:nCode.Search.IIndexUpdateContext.IndexEntry(nCode.Search.SearchIndexEntry)">
            <summary>
            Add or updates the given Search Index Entry.
            </summary>
        </member>
        <member name="M:nCode.Search.IIndexUpdateContext.CommitChanges">
            <summary>
            Commit the chagnes to the Search Index.
            </summary>
        </member>
        <member name="M:nCode.Search.LuceneIndexUpdateContext.FlushIndex">
            <summary>
            Deletes all enties in this index.
            </summary>
            <param name="entryId"></param>
        </member>
        <member name="M:nCode.Search.SearchEngine.GetEntryCount(nCode.Search.SearchSource)">
            <summary>
            Get entry count in the index for the given search source.
            </summary>
        </member>
        <member name="M:nCode.Search.LuceneSearchEngine.GetEntryCount(nCode.Search.SearchSource)">
            <summary>
            Get entry count in the index for the given search source.
            </summary>
        </member>
        <member name="T:nCode.Search.SearchSource">
            <summary>
            Represens a source of douments for the search engine. 
            </summary>
        </member>
        <member name="M:nCode.Search.SearchSource.GetUpdateContext">
            <summary>
            Get a Index Update Context for this Search Source.
            </summary>
        </member>
        <member name="P:nCode.Search.SearchSource.SourceGuid">
            <summary>
            Gets a Globally Unique Id that identifies this Search Source.
            </summary>
        </member>
        <member name="T:nCode.UI.NavigationTree`2">
            <summary>
            Represents a the Genric Navigation Tree in the Navigation Framework.
            </summary>
        </member>
        <member name="M:nCode.UI.NavigationTree`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`1,System.Boolean},System.Func{`1,System.Boolean},nCode.UI.INavigationItem)">
            <summary>
            Initializes a new instance of the <see cref="!:NavigationTree"/> class.
            </summary>
            <param name="sourceFilter">The source filter.</param>
            <param name="viewFilter">The view filter.</param>
            <param name="traverseFilter">The traverse filter.</param>
            <param name="root">The initial root of the tree, or null the true root.</param> 
        </member>
        <member name="M:nCode.UI.NavigationTree`2.InitializeSource">
            <summary>
            Initializes the source.
            </summary>
            <returns></returns>
        </member>
        <member name="M:nCode.UI.NavigationTree`2.Expand(nCode.UI.INavigationItem)">
            <summary>
            Expands the specified item.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationTree`2.SourceFilter">
            <summary>
            Gets the source filter.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationTree`2.ViewFilter">
            <summary>
            Gets the view filter.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationTree`2.TraverseFilter">
            <summary>
            Gets the traverse filter.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationTree`2.Roots">
            <summary>
            Gets the roots of the tree.
            </summary>
        </member>
        <member name="T:nCode.UI.NavigationViewItem">
            <summary>
            Represents a node i the navigation graph.
            </summary>
        </member>
        <member name="T:nCode.UI.INavigationItem">
            <summary>
            Represents requirements for implementing a Navigation Item.
            </summary>
        </member>
        <member name="M:nCode.UI.INavigationItem.GetParent">
            <summary>
            Gets a possibly context-specific logical Parent of this Navigation Item in the Navigation Graph. This is used to automatically calculate the breadcrumb path available in <see cref="P:nCode.UI.Navigation.CurrentPath"/>.
            </summary>
        </member>
        <member name="P:nCode.UI.INavigationItem.ID">
            <summary>
            Gets the unique identifier of this Navigation Item.
            </summary>
        </member>
        <member name="P:nCode.UI.INavigationItem.Title">
            <summary>
            Gets the title of this Navigation Item.
            </summary>
        </member>
        <member name="P:nCode.UI.INavigationItem.Url">
            <summary>
            Gets a possible frindly URL that can be used for navigation to this Navigation Item.
            </summary>
        </member>
        <member name="M:nCode.UI.NavigationViewItem.EnsureChildren">
            <summary>
            Ensures that the associated INavigationGraph is expanded for the current node.
            </summary>
        </member>
        <member name="M:nCode.UI.NavigationViewItem.GetChildren">
            <summary>
            Gets an enumeration object that represents all the child nodes of the current hierarchical node.
            </summary>
        </member>
        <member name="M:nCode.UI.NavigationViewItem.GetParent">
            <summary>
            Gets an IHierarchyData object that represents the parent node of the current hierarchical node.
            </summary>
        </member>
        <member name="M:nCode.UI.NavigationViewItem.nCode#UI#INavigationItem#GetParent">
            <summary>
            Gets a possibly context-specific logical Parent of the Navigation Item in the Navigation Graph. This is used to automatically calculate the breadcrumb path available in <see cref="P:nCode.UI.Navigation.CurrentPath"/>.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationViewItem.HasChildren">
            <summary>
            Gets a valie that indicates wheather this node has decendents.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationViewItem.Item">
            <summary>
            Gets the hierarchical data node that the object represents.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationViewItem.Path">
            <summary>
            Gets the hierarchical path of the node.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationViewItem.Type">
            <summary>
            Gets a string that identifies the type of the node.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationViewItem.ID">
            <summary>
            Gets the unique identifier of the Navigation Item.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationViewItem.Title">
            <summary>
            Gets the title of the Navigation Item.
            </summary>
        </member>
        <member name="P:nCode.UI.NavigationViewItem.Url">
            <summary>
            Gets a possible frindly URL that can be used for navigation to the Navigation Item.
            </summary>
        </member>
        <member name="T:nCode.UI.ISeoData">
            <summary>
            Represents a interface for providing data for Search Engine Optimizations.
            </summary>
        </member>
        <member name="T:nCode.CanonicalDomainModule">
            <summary>
            Module for ensuring a single host header name is used for the website (SEO).
            </summary>
        </member>
        <member name="P:nCode.CanonicalDomainModule.CurrentHostMapping">
            <summary>
            Gets the current host mapping, if any.
            </summary>
        </member>
        <member name="T:nCode.Configuration.AdminInterfaceSection">
            <summary>
            Represents the Admin Interface Section in the configuration. 
            The word "Interface" in this context is not well-choosen, since the section also 
            contains the information about Modules and ImportManagers.
            </summary>
        </member>
        <member name="M:nCode.Configuration.AdminInterfaceSection.GetSection">
            <summary>
            Gets the Admin Interface Section.
            </summary>
        </member>
        <member name="P:nCode.Configuration.AdminInterfaceSection.Modules">
            <summary>
            Gets a list of Module Settings. Use Settings.Modules to access the actual modules.
            </summary>
        </member>
        <member name="P:nCode.Configuration.AdminInterfaceSection.ImportManagers">
            <summary>
            Gets a list of Import Managers. Use Settings.ImportManagers to access the actual Import Managers.
            </summary>
        </member>
        <member name="P:nCode.Configuration.AdminInterfaceSection.Shortcuts">
            <summary>
            Gets a list of shortcuts
            </summary>
        </member>
        <member name="T:nCode.Configuration.SiteSection">
            <summary>
            Represents the Site Section in the configuration. 
            </summary>
        </member>
        <member name="M:nCode.Configuration.SiteSection.GetSection">
            <summary>
            Gets the Admin Interface Section.
            </summary>
        </member>
        <member name="P:nCode.Configuration.SiteSection.HostMappings">
            <summary>
            Gets a list of Module Settings. Use Settings.Modules to access the actual modules.
            </summary>
        </member>
        <member name="T:nCode.ContentRewriteHandler">
            <summary>
            Abstraction for Content Rewrite Handlers
            </summary>
        </member>
        <member name="M:nCode.ContentRewriteHandler.RewritePreRenderMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Rewrites match in content before rendering.
            </summary>
        </member>
        <member name="M:nCode.ContentRewriteHandler.RewritePreEditMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Rewrites match in content before edit.
            </summary>
        </member>
        <member name="M:nCode.ContentRewriteHandler.RewriteUrl(System.String)">
            <summary>
            Rewrites the url.
            </summary>
        </member>
        <member name="P:nCode.ContentRewriteHandler.Regex">
            <summary>
            Gets the Regex used to match this handler against content.
            </summary>
        </member>
        <member name="T:nCode.ContentRewriteControl">
            <summary>
            Handles Content Rewrite
            </summary>
        </member>
        <member name="M:nCode.ContentRewriteControl.AddHandler(nCode.ContentRewriteHandler)">
            <summary>
            Adds a new handler.
            </summary>
        </member>
        <member name="M:nCode.ContentRewriteControl.RewriteUrl(System.String)">
            <summary>
            Rewrites the given url using the loaded Rewrite Hadnlers.
            </summary>
        </member>
        <member name="M:nCode.ContentRewriteControl.RewritePreRenderContent(System.String)">
            <summary>
            Rewrites the content before rendering.
            </summary>
        </member>
        <member name="T:nCode.CultureRouteHandler">
            <summary>
            Routes CMS page requests to Content-View.aspx
            </summary>
        </member>
        <member name="T:nCode.Data.FileHelpersImportManager`1">
            <summary>
            
            </summary>
            <typeparam name="B">FileHelpers boddy-class.</typeparam>
        </member>
        <member name="T:nCode.Data.ImportManager">
            <summary>
            Represent a Import Manager, that can Import the given Objects into the system.
            </summary>
        </member>
        <member name="M:nCode.Data.ImportFormatException.#ctor(System.String,System.Nullable{System.Int32},System.String,System.Exception)">
            <summary>
            Initializes a new ImportFormatException
            </summary>
        </member>
        <member name="M:nCode.Data.ImportFormatException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
        </member>
        <member name="P:nCode.Data.ImportFormatException.InputLine">
            <summary>
            Gets or set the line number data for the Import Format Exception, if the inport is from a line numbered source.
            </summary>
        </member>
        <member name="P:nCode.Data.ImportFormatException.InputData">
            <summary>
            Gets or set any associated data for the Import Format Exception.
            </summary>
        </member>
        <member name="T:nCode.Data.SetExistingRowsAttribute">
            <summary>
            Instructs the Schema Update that existing rows shuold be set to the given value. This is handy when introducing a new non-null column.
            </summary>
        </member>
        <member name="M:nCode.Data.SetExistingRowsAttribute.#ctor(System.String)">
            <summary>
            Instructs the Schema Update that existing rows shuold be set to the given value. This is handy when introducing a new non-null column.
            </summary>
        </member>
        <member name="P:nCode.Data.SetExistingRowsAttribute.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:nCode.Configuration.Module">
            <summary>
            Reresents a Administration Module.
            </summary>
        </member>
        <member name="M:nCode.Configuration.Module.#ctor">
            <summary>
            Creates a Module.
            </summary>
        </member>
        <member name="M:nCode.Configuration.Module.ApplicationStart(System.Web.HttpApplication)">
            <summary>
            When overridden in a derived class it allows application wide startup logic for the module.
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:nCode.Configuration.Module.Startup(Owin.IAppBuilder)">
            <summary>
            Called on application startup when running on OWIN.
            </summary>
        </member>
        <member name="M:nCode.Configuration.Module.Upgrade">
            <summary>
            Upgrades this module to its latest version.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.Serialize``1(``0)">
            <summary>
            Serializes a object and returns it as a string.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.Deserialize``1(System.String,``0)">
            <summary>
            Deserializes a json or xml-encoded property and returns it as type T. If serializedData is null the default value is returned.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.GetProperty``1(System.Type,System.Guid,System.String,``0)">
            <summary>
            Gets the given property from the database.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.GetProperty``1(System.Guid,System.Guid,System.String,``0)">
            <summary>
            Gets the given property from the database.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.SetProperty``1(System.Type,System.Guid,System.String,``0)">
            <summary>
            Sets the given property in the database.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.SetProperty``1(System.Guid,System.Guid,System.String,``0)">
            <summary>
            Sets the given property in the database.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.GetPropertyKeys(System.Guid,System.Guid)">
            <summary>
            Gets a list of all property keys for the given type.
            </summary>
        </member>
        <member name="M:nCode.Metadata.GenericMetadataHelper.GetProperties(System.Guid,System.Guid)">
            <summary>
            Gets a list of all properties for the given type.
            </summary>
        </member>
        <member name="M:nCode.Metadata.MetadataDescriptorCollection.GetMetadataDescriptors(System.Guid)">
            <summary>
            Gets a list of Metadata Descriptors from the System Metadata Table.
            </summary>
        </member>
        <member name="T:nCode.UI.TreeNavigationItem">
            <summary>
            Represents a Navigation Item in a Navigation Tree.
            </summary>
        </member>
        <member name="M:nCode.UI.TreeNavigationItem.GetParent">
            <summary>
            Gets a possibly context-specific logical Parent of this Navigation Item in the Navigation Graph. This is used to automatically calculate the breadcrumb path available in <see cref="P:nCode.UI.Navigation.CurrentPath"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.ID">
            <summary>
            Gets the unique identifier of this Navigation Item.
            </summary>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.ParentID">
            <summary>
            Gets the unique identifier of the parent Navigation Item in the Navigation Tree, or null if this item is a root node.
            </summary>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.Title">
            <summary>
            Gets the title of this Navigation Item.
            </summary>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.IsVisible">
            <summary>
            Gets or sets a value indicating whether this Navigation Item is visible.
            </summary>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.Url">
            <summary>
            Gets a possible frindly URL that can be used for navigation to this Navigation Item.
            </summary>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.IsActive">
            <summary>
            Gets a value indicating whether this Navigation Item is part of the current logical breadcrumb path available in <see cref="P:nCode.UI.Navigation.CurrentPath"/>.
            </summary>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
        </member>
        <member name="P:nCode.UI.TreeNavigationItem.HasChildren">
            <summary>
            Gets or set a value indicating if this node has child nodes.
            </summary>
        </member>
        <member name="T:nCode.SystemModule">
            <summary>
            Represents the System Module.
            </summary>
        </member>
        <member name="T:nCode.Data.ForeignKey">
            <summary>
            Represents a Foreign Key.
            </summary>
        </member>
        <member name="M:nCode.Data.ForeignKey.#ctor">
            <summary>
            Initializes a new Foreign Key.
            </summary>
        </member>
        <member name="M:nCode.Data.ForeignKey.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new Foreign Key with the given relation and name.
            </summary>
            <param name="from">table.column</param>
            <param name="to">table.column</param>
            <param name="name">name</param>
        </member>
        <member name="M:nCode.Data.ForeignKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new Foreign Key with the given relation and an automatically assigned name.
            </summary>
            <param name="from">table.column</param>
            <param name="to">table.column</param>
        </member>
        <member name="P:nCode.Data.ForeignKey.Name">
            <summary>
            The name of the Foreign Key.
            </summary>
        </member>
        <member name="P:nCode.Data.ForeignKey.FromTable">
            <summary>
            The name of the Foreign Table.
            </summary>
        </member>
        <member name="P:nCode.Data.ForeignKey.FromColumn">
            <summary>
            The name of the Foreign Column.
            </summary>
        </member>
        <member name="P:nCode.Data.ForeignKey.ToTable">
            <summary>
            The name of the Primary Table.
            </summary>
        </member>
        <member name="P:nCode.Data.ForeignKey.ToColumn">
            <summary>
            The name of the Primary Column.
            </summary>
        </member>
        <member name="P:nCode.Data.ForeignKey.UpdateRule">
            <summary>
            The Update Rule.
            </summary>
        </member>
        <member name="P:nCode.Data.ForeignKey.DeleteRule">
            <summary>
            The Delete Rule.
            </summary>
        </member>
        <member name="M:nCode.Data.SchemaControl.Update">
            <summary>
            Ensures that the database schema matches the corresponding schema files. 
            </summary>
        </member>
        <member name="M:nCode.Data.SchemaDefinition.#ctor">
            <summary>
            Initializes a new empty instance of a table.
            </summary>
        </member>
        <member name="T:nCode.Data.ColumnInfo">
            <summary>
            Represents information about a column on the server.
            </summary>
        </member>
        <member name="T:nCode.Data.Table">
            <summary>
            Represents information about the schema for a table, and methods to enforce and update the server to match the schema.
            </summary>
        </member>
        <member name="M:nCode.Data.Table.GetForeignKeys(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Gets a list of all Foreign Keys.
            </summary>
        </member>
        <member name="M:nCode.Data.Table.GetUniqueKeys(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Gets a list of all Unique Keys.
            </summary>
        </member>
        <member name="M:nCode.Data.Table.GetIndexes(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            Gets a list of all Indexes.
            </summary>
        </member>
        <member name="M:nCode.Data.Table.ColumnUpdateNeeded(nCode.Data.Column,nCode.Data.ColumnInfo)">
            <summary>
            Compare a definition column against the current database schema. Used to check if a update is needed. 
            </summary>
        </member>
        <member name="M:nCode.Data.Table.UpdateStructure(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            Updates core table structure (no ix, fk etc.)
            </summary>
        </member>
        <member name="P:nCode.Data.Table.OldName">
            <summary>
            Gets or sets a old name for this table. If the old name exists, it will be renamed to the current name. For naming consistency all Foreign Keys using this table, Unique Keys and Indexes on the table will be droped and re-created.
            </summary>
        </member>
        <member name="T:nCode.FeatureAccessControl">
            <summary>
            Handles access control for admin features.
            </summary>
        </member>
        <member name="M:nCode.FeatureAccessControl.ClearCache">
            <summary>
            Clears access list cache.
            </summary>
        </member>
        <member name="M:nCode.FeatureAccessControl.ClearCache(System.String)">
            <summary>
            Clears the given users access list cache
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:nCode.FeatureAccessControl.GetAccessList">
            <summary>
            Gets a list of acceable admin urls for the current user.
            </summary>
        </member>
        <member name="M:nCode.FeatureAccessControl.GetAccessList(System.String)">
            <summary>
            Gets a list of acceable admin urls for the given user.
            </summary>
        </member>
        <member name="P:nCode.Feature.IsVisible">
            <summary>
            Returns a value that indicates wheather this feature should be visiable given the current users access, and the settings of the module.
            </summary>
        </member>
        <member name="M:nCode.FeatureGroup.#ctor(nCode.Configuration.Module,System.String)">
            <summary>
            Creates a new FeatureGroup.
            </summary>
            <param name="nodeModule"></param>
        </member>
        <member name="P:nCode.FeatureGroup.Module">
            <summary>
            Gets the Module that this FeatureGroup belongs to.
            </summary>
        </member>
        <member name="P:nCode.FeatureGroup.Name">
            <summary>
            Gets the name of this FeatureGroup. 
            </summary>
        </member>
        <member name="P:nCode.FeatureGroup.Features">
            <summary>
            Gets a list of Features in this FeatureGroup.
            </summary>
        </member>
        <member name="P:nCode.FeatureGroupCollection.Item(System.String)">
            <summary>
            Returns the Feature Group with the given name, or null if the Feature Group dosn't exists.
            </summary>
            <param name="name">The name to search for.</param>
        </member>
        <member name="M:nCode.Imaging.ImageUtilities.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,nCode.Imaging.ImageResizeMode,System.Nullable{System.Drawing.Color})">
            <summary>
            Resizes a image using the given sizes and resize mode.
            </summary>
        </member>
        <member name="M:nCode.Imaging.ImageUtilities.EnsureImageSize(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Ensures that the given image exits and is up-to-date in the given size. Saves as PNG.
            </summary>        
        </member>
        <member name="M:nCode.Imaging.ImageUtilities.EnsureImageSize(System.String,System.Int32,System.Int32,nCode.Imaging.ImageResizeMode,System.Boolean,System.Drawing.Imaging.ImageFormat,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.Int32)">
            <summary>
            Ensures that the given image exits and is up-to-date in the given size.
            </summary>        
        </member>
        <member name="M:nCode.Imaging.ImageUtilities.GetImageOrientation(System.String)">
            <summary>
            Returns the orientation of the given file.
            </summary>
        </member>
        <member name="M:nCode.Imaging.ImageUtilities.GetImageSize(System.String)">
            <summary>
            Get the dimensions of the given image file.
            </summary>
        </member>
        <member name="T:nCode.Imaging.ImageResizeMode">
            <summary>
            Indeicates how an image should be resized to a given width/height.
            </summary>
        </member>
        <member name="F:nCode.Imaging.ImageResizeMode.Normal">
            <summary>
            Resizes the images, such it is as most maxWidth x maxHeight.
            </summary>
        </member>
        <member name="F:nCode.Imaging.ImageResizeMode.Stretch">
            <summary>
            Stretches the image, ignoring any aspect ratio. The output will have the dimension maxWidth x maxHeight.
            </summary>
        </member>
        <member name="F:nCode.Imaging.ImageResizeMode.Fill">
            <summary>
            Fills the output image from center, allowing cropping of edges. The output will have dimension the maxWidth x maxHeight.
            </summary>
        </member>
        <member name="M:nCode.IO.FileUtilities.SafePath(System.String)">
            <summary>
            Returns a path that is safe for naming resources that should be available over the Http protocol.
            </summary>
        </member>
        <member name="M:nCode.IO.FileUtilities.ResolveNameConflict(System.String)">
            <summary>
            Returns a name of a given path appended with a hythen and a number, such that the path does not exists.
            </summary>
            <param name="physicalFilePath"></param>
            <returns></returns>
        </member>
        <member name="T:nCode.IO.vCards.Address">
            <summary>
            Represents a vCard address.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.Address.#ctor">
            <summary>
            Initializes a new vCard address.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.Address.ToString">
            <summary>
            Convert this address to a vCard string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:nCode.IO.vCards.Address.PostOfficeAddress">
            <summary>
            Gets or sets the post office address.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.Address.ExtendedAddress">
            <summary>
            Gets or sets the extended address.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.Address.Street">
            <summary>
            Gets or sets the street.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.Address.Locality">
            <summary>
            Gets or sets the locality.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.Address.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.Address.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.Address.Country">
            <summary>
            Gets or sets the country.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.Address.AddressType">
            <summary>
            Gets or sets the type of this address.
            </summary>
        </member>
        <member name="T:nCode.IO.vCards.AddressType">
            <summary>
            Represents a vCard address type.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.AddressType.DOM">
            <summary>
            A domestic address. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.AddressType.INTL">
            <summary>
            An international address. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.AddressType.POSTAL">
            <summary>
            A postal address.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.AddressType.PARCEL">
            <summary>
            A parcel address.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.AddressType.HOME">
            <summary>
            A home address.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.AddressType.WORK">
            <summary>
            A work address.
            </summary>
        </member>
        <member name="T:nCode.IO.vCards.PhoneNumberType">
            <summary>
            Represents a vCard phone number type.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.PREF">
            <summary>
            Indicates a preferred number.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.WORK">
            <summary>
            Indicates a work number. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.HOME">
            <summary>
            Indicates a home number. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.VOICE">
            <summary>
            Indicates a voice number. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.FAX">
            <summary>
            Indicates a fax number. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.MSG">
            <summary>
            Indicates a messaging service on the number. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.CELL">
            <summary>
            Indicates a cell phone. 
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.PAGER">
            <summary>
            Indicates a pager number.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.BBS">
            <summary>
            Indicates a bulletin board system.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.MODEM">
            <summary>
            Indicates a MODEM number.
            </summary>
        </member>
        <member name="F:nCode.IO.vCards.PhoneNumberType.CAR">
            <summary>
             Indicates a car phone.
            </summary>
        </member>
        <member name="T:nCode.IO.vCards.PhoneNumber">
            <summary>
            Represents a vCard phone number.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.PhoneNumber.#ctor">
            <summary>
            Initializes a new phone number.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.PhoneNumber.#ctor(System.String,nCode.IO.vCards.PhoneNumberType)">
            <summary>
            Initializes a new phone number.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.PhoneNumber.ToString">
            <summary>
            Converts this phone number to a vCard string.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.PhoneNumber.Number">
            <summary>
            Gets or sets the number.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.PhoneNumber.PhoneNumberType">
            <summary>
            Gets or sets the type of this phone number.
            </summary>
        </member>
        <member name="T:nCode.IO.vCards.VCard">
            <summary>
            Represents a vCard.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.VCard.#ctor">
            <summary>
            Initializes a new eCard.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.VCard.Generate(System.String,System.IO.FileMode)">
            <summary>
            Writes the vCard string to file.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.VCard.Generate(System.IO.Stream)">
            <summary>
            Writes the vCard string to a sream.
            </summary>
        </member>
        <member name="M:nCode.IO.vCards.VCard.ToString">
            <summary>
            Converts this vCard to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:nCode.IO.vCards.VCard.FormattedName">
            <summary>
            Gets or sets the formatted name.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.MiddleName">
            <summary>
            Gets or sets the middle name.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.NamePrefix">
            <summary>
            Gets or sets the name prefix.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.NameSuffix">
            <summary>
            Gets or sets the name suffix.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.BirthDate">
            <summary>
            Gets or sets the birth date.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.Addresses">
            <summary>
            Gets a list of addresses.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.PhoneNumbers">
            <summary>
            Gets a list of phone numbers.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.EmailAddresses">
            <summary>
            Gets a list of email addresses.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.Role">
            <summary>
            Gets or sets the role.
            </summary>
        </member>
        <member name="P:nCode.IO.vCards.VCard.Organization">
            <summary>
            Gets or sets the organization.
            </summary>
        </member>
        <member name="T:nCode.EntryType">
            <summary>
            Classify a Log entry.
            </summary>
        </member>
        <member name="M:nCode.Log.Initialize">
            <summary>
            Initializes Logging.
            </summary>
        </member>
        <member name="M:nCode.Log.Initialize(nCode.Logging.LoggingEngine)">
            <summary>
            Initializes Logging.
            </summary>
        </member>
        <member name="M:nCode.Log.Info(System.String,System.Exception)">
            <summary>
            Writes a Infomation Log Message.
            </summary>
        </member>
        <member name="M:nCode.Log.Warn(System.String,System.Exception)">
            <summary>
            Writes a Warning Log Message.
            </summary>
        </member>
        <member name="M:nCode.Log.Error(System.String,System.Exception)">
            <summary>
            Writes a Error Log Message.
            </summary>
        </member>
        <member name="M:nCode.Log.Verbose(System.String,System.Exception)">
            <summary>
            Writes a Error Log Message.
            </summary>
        </member>
        <member name="M:nCode.Log.WriteEntry(System.String,System.String,System.String,nCode.EntryType)">
            <summary>
            Writes a entry to the Log.
            </summary>
            <param name="module">The module that is executing.</param>
            <param name="action">The action tried to preform.</param>
            <param name="message">A messege descriping the entry.</param>
            <param name="type">A EntryType classifying the entry.</param>
        </member>
        <member name="M:nCode.Log.WriteEntry(System.String,System.String,nCode.EntryType,System.Exception)">
            <summary>
            Writes a entry to the Log.
            </summary>
            <param name="module">The module that is executing.</param>
            <param name="action">The action tried to preform.</param>
            <param name="type">>A EntryType classifying the entry.</param>
            <param name="ex">The exception occurred.</param>
        </member>
        <member name="M:nCode.Log.WriteEntry(System.String,System.String,System.String,nCode.EntryType,System.Exception)">
            <summary>
            Writes a entry to the Log.
            </summary>
            <param name="module">The module that is executing.</param>
            <param name="action">The action tried to preform.</param>
            <param name="message">A messege descriping the entry.</param>
            <param name="type">>A EntryType classifying the entry.</param>
            <param name="ex">The exception occurred.</param>
        </member>
        <member name="M:nCode.Log.WriteEntry(nCode.EntryType,System.String,System.String,System.String,System.Exception)">
            <summary>
            Writes a entry to the Log.
            </summary>
            <param name="type">>A EntryType classifying the entry.</param>
            <param name="module">The module that is executing.</param>
            <param name="action">The action tried to preform.</param>
            <param name="message">A messege descriping the entry.</param>
            <param name="exception">The exception occurred.</param>
        </member>
        <member name="M:nCode.Security.SystemMembershipProvider.GenerateSalt">
            <summary>
            Generates a salt using a random crypto algorithm.
            </summary>
        </member>
        <member name="M:nCode.Security.SystemMembershipProvider.EncodePassword(System.String,System.String)">
            <summary>
            Encodes a password with a given salt using the SHA512 algorithm.
            </summary>
        </member>
        <member name="M:nCode.Security.SystemMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Deletes a user.
            </summary>
            <param name="username">The username of the user to delete.</param>
            <param name="deleteAllRelatedData">True to delete any related data.</param>
            <returns>True if user was deleted, otherwise false.</returns>
        </member>
        <member name="M:nCode.Security.SystemMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of a user.
            </summary>
            <param name="username">The username of the user to update.</param>
            <param name="oldPassword">The old password, or null to override validation.</param>
            <param name="newPassword">The new password.</param>
            <returns>True if password was successfull updated, otherwise false.</returns>
        </member>
        <member name="M:nCode.Security.SystemMembershipProvider.ChangeUsername(System.String,System.String)">
            <summary>
            Changes a User's username.
            </summary>
            <param name="oldUsername">The old username.</param>
            <param name="newUsername">The new username.</param>
            <returns>True if success, otherwise false.</returns>
        </member>
        <member name="T:nCode.ServiceModel.MessageVersionConverter">
            <summary>
            Converts the string representation of a MessageVersion into the corresponding MessageVersion.
            </summary>
        </member>
        <member name="T:nCode.ServiceModel.StmEncoderBindingElementExtensionElement">
            <summary>
            StmEncoderBindingElementExtensionElement allows the use of our StmeEncoder from
            a config file.
            </summary>
        </member>
        <member name="M:nCode.ServiceModel.StmEncoderBindingElementExtensionElement.CreateBindingElement">
            <summary>
            Create our custom binding element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:nCode.ServiceModel.StmEncoderFactory.#ctor(System.String,System.String,System.ServiceModel.Channels.MessageVersion)">
            <summary>
            Create a new instance of the SimpleMessageEncoderFactory. The factory knows
            how to create SimpleMessageEncoders that can read and write to a stream for
            various types of message encoding
            </summary>
            <param name="mediaType"></param>
            <param name="charSet"></param>
            <param name="version"></param>
        </member>
        <member name="T:nCode.Settings">
            <summary>
            Global Settings Class
            </summary>
        </member>
        <member name="M:nCode.Settings.GetProperty``1(System.String,``0)">
            <summary>
            Gets a property of type T with the given key. Returns the default value if the property does no exists.
            </summary>
        </member>
        <member name="M:nCode.Settings.SetProperty``1(System.String,``0)">
            <summary>
            Sets a property of type T with the given key to the given value.
            </summary>
        </member>
        <member name="P:nCode.Settings.IsSetupComplete">
            <summary>
            Gets or sets a value indicating if Setup has been completed.
            </summary>
        </member>
        <member name="P:nCode.Settings.HostMappings">
            <summary>
            Gets or sets the list of Host Mappings.
            </summary>
        </member>
        <member name="P:nCode.Settings.Url">
            <summary>
            Gets or sets the fully qualified url for the application root.
            </summary>
        </member>
        <member name="P:nCode.Settings.EnforceCanonicalDomain">
            <summary>
            Gets or set whether the Canonical Domain Module should enforce urls based on the fully qualified url.
            </summary>
        </member>
        <member name="P:nCode.Settings.Title">
            <summary>
            Gets or set the Site Title.
            </summary>
        </member>
        <member name="P:nCode.Settings.Subtitle">
            <summary>
            Gets or sets the Site Subtitle
            </summary>
        </member>
        <member name="P:nCode.Settings.TitleMode">
            <summary>
            Gets or sets the how the title-tag in the header sohuld be rendered.
            </summary>
        </member>
        <member name="P:nCode.Settings.SenderName">
            <summary>
            Gets or sets the name on the sender of emails.
            </summary>
        </member>
        <member name="P:nCode.Settings.SenderAddress">
            <summary>
            Gets or sets the email-address on the sender of emails.
            </summary>
        </member>
        <member name="P:nCode.Settings.ObfuscateEmail">
            <summary>
            Get a values whether to Obfuscate Email in content.
            </summary>
        </member>
        <member name="P:nCode.Settings.GoogleAnalyticsAccount">
            <summary>
            Gets or sets Google Analytics Account that sould be used for tracking.
            </summary>
        </member>
        <member name="P:nCode.Settings.Modules">
            <summary>
            Gets a list of loaded modules.
            </summary>
        </member>
        <member name="P:nCode.Settings.ImportManagers">
            <summary>
            Gets a list of import manager configurations.
            </summary>
        </member>
        <member name="P:nCode.Settings.ConnectionString">
            <summary>
            Gets the database connection string.
            </summary>
        </member>
        <member name="P:nCode.Settings.SupportedCultureNames">
            <summary>
            Gets a list of supported culture names.
            </summary>
        </member>
        <member name="P:nCode.Settings.PropertyCache">
            <summary>
            Gets the Property Cache where settings are cached.
            </summary>
        </member>
        <member name="M:nCode.Security.SystemMembershipUser.#ctor(System.String,System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String)">
            <summary>
            Initialixes a new System User
            </summary>
        </member>
        <member name="P:nCode.Security.SystemMembershipUser.Current">
            <summary>
            Gets the current loged in user.
            </summary>
        </member>
        <member name="P:nCode.Security.SystemMembershipUser.Name">
            <summary>
            Gets or sets the full name of the User.
            </summary>
        </member>
        <member name="P:nCode.Security.SystemMembershipUser.MustChangePassword">
            <summary>
            Gets or sets whether the user must change password upun login.
            </summary>
        </member>
        <member name="T:nCode.UI.CustomizedMasterPage">
            <summary>
            A Master Page that allows customization through a number of metadata properties.
            </summary>
        </member>
        <member name="T:nCode.UI.IMasterPage">
            <summary>
            Indicates that this MasterPage should be listed in the Page Editor using the given name.
            </summary>
        </member>
        <member name="M:nCode.UI.CustomizedMasterPage.#ctor">
            <summary>
            Initializa a new Customized Master Page.
            </summary>
        </member>
        <member name="M:nCode.UI.CustomizedMasterPage.GetDefaultMasterPageFile">
            <summary>
            Gets the default masterpage for this site. Usefull to set masterpage in constructor of nested master pages.
            </summary>
        </member>
        <member name="P:nCode.UI.CustomizedMasterPage.MetadataDescriptors">
            <summary>
            Gets a list of MetadataDescriptors associated with this Master Page.
            </summary>
        </member>
        <member name="P:nCode.UI.CustomizedMasterPage.HideLegacyMetadata">
            <summary>
            Gets or sets a value indicating that Legacy Metadata (i.e. Image1, Image2, Image3) should be hidden during page editing.
            </summary>
        </member>
        <member name="P:nCode.UI.CustomizedMasterPage.IsEditing">
            <summary>
            Gets a value indication ot the current page is in edit mode.
            </summary>
        </member>
        <member name="P:nCode.UI.CustomizedMasterPage.MetadataContext">
            <summary>
            Gets the Metadata Context for the current Page, if Page is nCode.UI.Page, otherwise null.
            </summary>
        </member>
        <member name="P:nCode.UI.CustomizedMasterPage.SiteMetadataContext">
            <summary>
            Gets the Metadata Context for the site.
            </summary>
        </member>
        <member name="P:nCode.UI.CustomizedMasterPage.Navigation">
            <summary>
            Gets the Navigation object for the current Page, if Page is nCode.UI.Page, otherwise null.
            </summary>
        </member>
        <member name="P:nCode.UI.CustomizedMasterPage.Name">
            <summary>
            Gets a name identifying this Master Page during page editing.
            </summary>
        </member>
        <member name="T:nCode.UI.MetadataEditControl">
            <summary>
            Abstract class for User Controls that edits Metadata 
            </summary>
        </member>
        <member name="T:nCode.UI.LocalizationEventArgs">
            <summary>
            Summary description for LocalizationEventArgs
            </summary>
        </member>
        <member name="M:nCode.Metadata.MetadataDescriptor.GetEditControl">
            <summary>
            Gets an user control that can be used to edit this metadata.
            </summary>
        </member>
        <member name="M:nCode.Metadata.MetadataDescriptor`1.GetEditControl">
            <summary>
            Gets an user control that can be used to edit this metadata.
            </summary>
        </member>
        <member name="T:nCode.UI.Navigation">
            <summary>
            Dommy method for navigation extension methods.
            </summary>
        </member>
        <member name="P:nCode.UI.Navigation.Current">
            <summary>
            Gets the current ContentPage for this request, or null if this is not
            a content page request.
            </summary>
        </member>
        <member name="P:nCode.UI.Navigation.CurrentPath">
            <summary>
            Gets the current Path of content pages for this requist, or an empty list if this os 
            not a content page request.
            </summary>
        </member>
        <member name="T:nCode.UI.Page">
            <summary>
            Represents a nCode Page. All ASPX-files should inhiret this class.
            </summary>
        </member>
        <member name="M:nCode.UI.Page.#ctor">
            <summary>
            Initializes a new page.
            </summary>
        </member>
        <member name="P:nCode.UI.Page.SiteMetadataContext">
            <summary>
            Returns a metadata context that are global to the entire site, sutable for storing site-wise properties.
            </summary>
        </member>
        <member name="T:nCode.UI.PageExtensions">
            <summary>
            Contains extention methods for pages.
            </summary>
        </member>
        <member name="M:nCode.UI.PageExtensions.IncludeStyleSheet(System.Web.UI.Page,System.String)">
            <summary>
            Registers a Stylesheet-file.
            </summary>
        </member>
        <member name="M:nCode.UI.PageExtensions.RegisterScriptInclude(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Registers a Javascript-file using the given key.
            </summary>
        </member>
        <member name="M:nCode.UI.PageExtensions.AddMetaControl(System.Web.UI.Page,System.Web.UI.Control)">
            <summary>
            Adds a meta-custrol to the header of this page.
            </summary>
        </member>
        <member name="M:nCode.UI.PageExtensions.AddMetaTag(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Adds a meta-tag to the header of this page.
            </summary>
        </member>
        <member name="M:nCode.UI.PageExtensions.AddHttpEquivMetaTag(System.Web.UI.Page,System.String,System.String)">
            <summary>
            Adds a Http-equivalent meta-tag to the header of this page.
            </summary>
        </member>
        <member name="M:nCode.UI.PageExtensions.AddSeoTags(System.Web.UI.Page,nCode.UI.ISeoData)">
            <summary>
            Adds Seo-tags (Currently Meta- and Open Graph-tags) based on the given ISeoData item.
            </summary>
        </member>
        <member name="P:nCode.UI.SelectorControl.CssClass">
            <summary>
            Gets or sets the CSS class rendered by the control.
            </summary>
        </member>
        <member name="P:nCode.UI.SelectorControl.IconUrl">
            <summary>
            Gets or sets the Url for the Icon Image.
            </summary>
        </member>
        <member name="P:nCode.UI.SelectorControl.Width">
            <summary>
            Gets or sets the width of the control, excluding the Icon Image.
            </summary>
        </member>
        <member name="P:nCode.UI.SelectorControl.Padding">
            <summary>
            Gets or sets the padding of the control.
            </summary>
        </member>
        <member name="P:nCode.UI.SelectorControl.Value">
            <summary>
            Gets or sets the value of the field. 
            </summary>
        </member>
        <member name="T:nCode.UI.LocalizationUpdateEventArgs">
            <summary>
            Summary description for UpdateLoxalizationEventArgs
            </summary>
        </member>
        <member name="T:nCode.UI.TitleMode">
            <summary>
            Defines how a titles is handled.
            </summary>
        </member>
        <member name="F:nCode.UI.TitleMode.Default">
            <summary>
            Uses default settings.
            </summary>
        </member>
        <member name="F:nCode.UI.TitleMode.None">
            <summary>
            Uses only content page title.
            </summary>
        </member>
        <member name="F:nCode.UI.TitleMode.AppendAfter">
            <summary>
            Append global title after.
            </summary>
        </member>
        <member name="F:nCode.UI.TitleMode.AppendBefore">
            <summary>
            Appende glibal title before.
            </summary>
        </member>
        <member name="P:nCode.UI.UserSelector.User">
            <summary>
            Gets or sets the currently selected user.
            </summary>
        </member>
        <member name="T:nCode.Utilities">
            <summary>
            Provises comon utilities.
            </summary>
        </member>
        <member name="M:nCode.Utilities.GenerateRandomPassword(System.Int32)">
            <summary>
            Generates a random password of the given length with the charecters a-z, A-Z and 0-9.
            </summary>
        </member>
        <member name="M:nCode.Utilities.NullIfWhiteSpace(System.String)">
            <summary>
            Returns null if string is null or whitespace, otherwise just return the string. 
            </summary>
        </member>
        <member name="M:nCode.Utilities.UrlEncodeString(System.String)">
            <summary>
            UrlEncode a string like System.Web.HttpUtility.UrlEncode, except this encode
            all charecters, not only the unsafe ones.
            </summary>
        </member>
        <member name="M:nCode.Utilities.UrlEncodeBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            UrlEncode bytes like System.Web.HttpUtility.UrlEncodeToBytes, except this encode
            all charecters, not only the unsafe ones.
            </summary>
        </member>
    </members>
</doc>
